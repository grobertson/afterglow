#!/usr/bin/env python3
import os
import ffmpeg
import argparse
import logging

parser = argparse.ArgumentParser()
parser.add_argument("infile")
args = parser.parse_args()

infile = args.infile
v_codec = 'libx264'
v_rate = '800k'
a_codec = 'aac'
a_rate = '192k'

outfile = infile.rstrip('.ts') + '-' + a_codec + '-' + a_rate + '-' + v_codec + '-' + v_rate + '.mkv'

def transcode(infile):
    print('Starting transcode of {}'.format(os.path.basename(infile)))
    t = ffmpeg.input(infile)
    t = t.output(outfile, acodec=a_codec, vcodec=v_codec,**{'b:a': a_rate, 'b:v': v_rate})
    try:
        t.run()
    except ffmpeg.Error:
        print("ERROR: Something went wrong during transcode. Sorry.")
        exit(255)
    
    print('Finishing transcode to {}'.format(os.path.basename(outfile)))
    print('Removing original file {}'.format(os.path.basename(infile)))
    os.unlink(infile)
    exit(0)

def probe(infile):
    print("Probe requested for '{}'.".format(infile))
    try:
        p = ffmpeg.probe(infile)
    except ffmpeg.Error:
        print('ERROR: File {} does not exist or no permissions. Fatal.'.format(infile))
        exit(255)
    file = p['format']
    streams = p['streams']
    video = streams[0]
    audio = streams[1]
    print('File: {}'.format(os.path.basename(infile)))
    print('Video stream: {}'.format(video['codec_long_name']))
    print('Audio stream: Channels: {}\tBitrate: {}k\tSample Rate: {}'.format(audio['codec_long_name'], audio['channels'], str(int(audio['bit_rate']) / 1000), audio['sample_rate']))

if __name__ == "__main__":
    probe(infile)
    transcode(infile)