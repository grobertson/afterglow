#!/usr/bin/env python3
import os, sys
import ffmpeg
import argparse
import subprocess
import logging

# Note about ffmpeg and subprocess. 

''' The ffmpeg-python binding library provides no way to specify a full path to ffmpeg.
        For that reason, we're importing subprocess and doing much of what I originally
        expected ffmpeg-python to do. TL;DR, ffmpeg-python is cute but not needed, and in
        places it just adds needless obfuscation. TODO: 86 it. '''

logging.basicConfig(filename='/tmp/afterglow-pp.log',level=logging.INFO)
parser = argparse.ArgumentParser()
parser.add_argument("infile")
args = parser.parse_args()

infile = args.infile
v_codec = 'libx264'
v_rate = '2M'
a_codec = 'copy'
keep_original = True # SET TO False if you want Afterglow to remove the original when done encoding

outfile = infile.rstrip('\.*$') + '.mkv'

def transcode(infile):
    logging.info('Starting transcode of {}'.format(os.path.basename(infile)))
    try:
        t = ffmpeg.input(infile)
        t = t.output(outfile, acodec=a_codec, vcodec=v_codec,**{'b:v': v_rate})
        t = t.overwrite_output()
        t = t.global_args('-nostdin -report')
        ff_cmd = t.compile()
        ff_cmd[0] = '/usr/bin/ffmpeg'
        logging.debug(ff_cmd)
        proc = subprocess.Popen(ff_cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE, cwd='/tmp/', env={}, universal_newlines=True)
        try:
            outs, errs = proc.communicate()
        except TimeoutExpired:
            proc.kill()
            outs, errs = proc.communicate()
        logging.info(str(outs))
        logging.debug(str(errs))
    except ffmpeg.Error as e:
            logging.critical(e.stderr)
            sys.exit(1)

    logging.info('Finishing transcode to {}'.format(os.path.basename(outfile)))
    if keep_original is False:
        logging.info('Removing original file {}'.format(os.path.basename(infile)))
        os.unlink(infile)
    else:
        logging.info('NOT removing original file {}'.format(os.path.basename(infile)))

def probe(infile):
    logging.info("Probe requested for '{}'.".format(infile))
    try:
        p = ffmpeg.probe(infile)
    except ffmpeg.Error:
        logging.critical('File {} does not exist or no permissions. Fatal.'.format(infile))
        sys.exit(255)
    file = p['format']
    streams = p['streams']
    video = streams[0]
    #audio = streams[1]
    logging.info('File: {}'.format(os.path.basename(infile)))
    logging.info('Video stream: {}'.format(video['codec_long_name']))
    logging.info('Audio stream: {}'.format(audio['codec_long_name']))

if __name__ == "__main__":
    #probe(infile)  -- Currently serves no real purpose, but something to look at.
    transcode(infile)
    #probe(outfile)
