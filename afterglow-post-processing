#!/usr/bin/env python3
import argparse
import logging
import os
import subprocess
import sys
from pprint import pprint

import ffmpeg

from yaml import load


class Afterglow(object):

    def __init__(self, infile):
        self.infile = infile
        try:
            self.conf = self.load_config()
        except:
            print('Unable to load configuration! Fatal.')
            exit(1)

    def load_config(self):
        with open('/opt/bin/afterglow.yaml') as f:
            return yaml.load(f, Loader=yaml.Loader)['ag']['defaults']

    def transcode(self):
        logging.info('Starting transcode of {}'.format(infile_name))
        try:
            t = ffmpeg.input(self.infile)
            t = t.output(outfile, acodec=a_codec, vcodec=v_codec,**{'b:v': v_rate})
            t = t.overwrite_output()
            t = t.global_args('-nostdin -report')
            ff_cmd = t.compile()
            ff_cmd[0] = '/usr/bin/ffmpeg'
            logging.debug(ff_cmd)
            proc = subprocess.Popen(ff_cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE, cwd='/tmp/', env={}, universal_newlines=True)
            try:
                outs, errs = proc.communicate()
            except TimeoutExpired:
                proc.kill()
                outs, errs = proc.communicate()
            logging.info(str(outs))
            logging.debug(str(errs))
        except ffmpeg.Error as e:
                logging.critical(e.stderr)
                sys.exit(1)

        logging.info('Finishing transcode to {}'.format(os.path.basename(outfile)))
        logging.info('Removing original file {}'.format(os.path.basename(infile)))
        # os.unlink(infile)

    def probe(self, infile):
        logging.info("Probe requested for '{}'.".format(infile))
        try:
            p = ffmpeg.probe(infile)
            pprint(p)
        
        except ffmpeg.Error:
            logging.critical('File {} does not exist or no permissions. Fatal.'.format(infile))
            sys.exit(255)
        file = p['format']
        streams = p['streams']
        video = streams[0]
        #audio = streams[1]
        logging.info('File: {}'.format(os.path.basename(infile)))
        logging.info('Video stream: {}'.format(video['codec_long_name']))
        logging.info('Audio stream: {}'.format(audio['codec_long_name']))

  #  logging.basicConfig(filename=conf['log_file'],level=conf['log_level'])


    parser = argparse.ArgumentParser()
    parser.add_argument("infile")
    args = parser.parse_args()

    v_codec = conf['v_codec']
    v_rate = conf['v_bitrate']
    a_codec = conf['a_codec']

    infile = args.infile
    infile_name = os.path.basename(infile)
    outfile = infile.rstrip('.ts') + '-' + a_codec + '-' + v_codec + '-' + v_rate + '.mkv'
    outfile_name = os.path.basename(outfile)


if __name__ == "__main__":
    
    #probe(infile)
    ag = Afterglow(infile)

    ag.transcode()
    #probe(outfile)
